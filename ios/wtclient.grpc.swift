//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: wtclient.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Wtclientrpc_WatchtowerClientAddTowerCall: ClientCallUnary {}

fileprivate final class Wtclientrpc_WatchtowerClientAddTowerCallBase: ClientCallUnaryBase<Wtclientrpc_AddTowerRequest, Wtclientrpc_AddTowerResponse>, Wtclientrpc_WatchtowerClientAddTowerCall {
  override class var method: String { return "/wtclientrpc.WatchtowerClient/AddTower" }
}

internal protocol Wtclientrpc_WatchtowerClientRemoveTowerCall: ClientCallUnary {}

fileprivate final class Wtclientrpc_WatchtowerClientRemoveTowerCallBase: ClientCallUnaryBase<Wtclientrpc_RemoveTowerRequest, Wtclientrpc_RemoveTowerResponse>, Wtclientrpc_WatchtowerClientRemoveTowerCall {
  override class var method: String { return "/wtclientrpc.WatchtowerClient/RemoveTower" }
}

internal protocol Wtclientrpc_WatchtowerClientListTowersCall: ClientCallUnary {}

fileprivate final class Wtclientrpc_WatchtowerClientListTowersCallBase: ClientCallUnaryBase<Wtclientrpc_ListTowersRequest, Wtclientrpc_ListTowersResponse>, Wtclientrpc_WatchtowerClientListTowersCall {
  override class var method: String { return "/wtclientrpc.WatchtowerClient/ListTowers" }
}

internal protocol Wtclientrpc_WatchtowerClientGetTowerInfoCall: ClientCallUnary {}

fileprivate final class Wtclientrpc_WatchtowerClientGetTowerInfoCallBase: ClientCallUnaryBase<Wtclientrpc_GetTowerInfoRequest, Wtclientrpc_Tower>, Wtclientrpc_WatchtowerClientGetTowerInfoCall {
  override class var method: String { return "/wtclientrpc.WatchtowerClient/GetTowerInfo" }
}

internal protocol Wtclientrpc_WatchtowerClientStatsCall: ClientCallUnary {}

fileprivate final class Wtclientrpc_WatchtowerClientStatsCallBase: ClientCallUnaryBase<Wtclientrpc_StatsRequest, Wtclientrpc_StatsResponse>, Wtclientrpc_WatchtowerClientStatsCall {
  override class var method: String { return "/wtclientrpc.WatchtowerClient/Stats" }
}

internal protocol Wtclientrpc_WatchtowerClientPolicyCall: ClientCallUnary {}

fileprivate final class Wtclientrpc_WatchtowerClientPolicyCallBase: ClientCallUnaryBase<Wtclientrpc_PolicyRequest, Wtclientrpc_PolicyResponse>, Wtclientrpc_WatchtowerClientPolicyCall {
  override class var method: String { return "/wtclientrpc.WatchtowerClient/Policy" }
}


/// Instantiate Wtclientrpc_WatchtowerClientServiceClient, then call methods of this protocol to make API calls.
internal protocol Wtclientrpc_WatchtowerClientService: ServiceClient {
  /// Synchronous. Unary.
  func addTower(_ request: Wtclientrpc_AddTowerRequest, metadata customMetadata: Metadata) throws -> Wtclientrpc_AddTowerResponse
  /// Asynchronous. Unary.
  @discardableResult
  func addTower(_ request: Wtclientrpc_AddTowerRequest, metadata customMetadata: Metadata, completion: @escaping (Wtclientrpc_AddTowerResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientAddTowerCall

  /// Synchronous. Unary.
  func removeTower(_ request: Wtclientrpc_RemoveTowerRequest, metadata customMetadata: Metadata) throws -> Wtclientrpc_RemoveTowerResponse
  /// Asynchronous. Unary.
  @discardableResult
  func removeTower(_ request: Wtclientrpc_RemoveTowerRequest, metadata customMetadata: Metadata, completion: @escaping (Wtclientrpc_RemoveTowerResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientRemoveTowerCall

  /// Synchronous. Unary.
  func listTowers(_ request: Wtclientrpc_ListTowersRequest, metadata customMetadata: Metadata) throws -> Wtclientrpc_ListTowersResponse
  /// Asynchronous. Unary.
  @discardableResult
  func listTowers(_ request: Wtclientrpc_ListTowersRequest, metadata customMetadata: Metadata, completion: @escaping (Wtclientrpc_ListTowersResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientListTowersCall

  /// Synchronous. Unary.
  func getTowerInfo(_ request: Wtclientrpc_GetTowerInfoRequest, metadata customMetadata: Metadata) throws -> Wtclientrpc_Tower
  /// Asynchronous. Unary.
  @discardableResult
  func getTowerInfo(_ request: Wtclientrpc_GetTowerInfoRequest, metadata customMetadata: Metadata, completion: @escaping (Wtclientrpc_Tower?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientGetTowerInfoCall

  /// Synchronous. Unary.
  func stats(_ request: Wtclientrpc_StatsRequest, metadata customMetadata: Metadata) throws -> Wtclientrpc_StatsResponse
  /// Asynchronous. Unary.
  @discardableResult
  func stats(_ request: Wtclientrpc_StatsRequest, metadata customMetadata: Metadata, completion: @escaping (Wtclientrpc_StatsResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientStatsCall

  /// Synchronous. Unary.
  func policy(_ request: Wtclientrpc_PolicyRequest, metadata customMetadata: Metadata) throws -> Wtclientrpc_PolicyResponse
  /// Asynchronous. Unary.
  @discardableResult
  func policy(_ request: Wtclientrpc_PolicyRequest, metadata customMetadata: Metadata, completion: @escaping (Wtclientrpc_PolicyResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientPolicyCall

}

internal extension Wtclientrpc_WatchtowerClientService {
  /// Synchronous. Unary.
  func addTower(_ request: Wtclientrpc_AddTowerRequest) throws -> Wtclientrpc_AddTowerResponse {
    return try self.addTower(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func addTower(_ request: Wtclientrpc_AddTowerRequest, completion: @escaping (Wtclientrpc_AddTowerResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientAddTowerCall {
    return try self.addTower(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func removeTower(_ request: Wtclientrpc_RemoveTowerRequest) throws -> Wtclientrpc_RemoveTowerResponse {
    return try self.removeTower(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func removeTower(_ request: Wtclientrpc_RemoveTowerRequest, completion: @escaping (Wtclientrpc_RemoveTowerResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientRemoveTowerCall {
    return try self.removeTower(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func listTowers(_ request: Wtclientrpc_ListTowersRequest) throws -> Wtclientrpc_ListTowersResponse {
    return try self.listTowers(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func listTowers(_ request: Wtclientrpc_ListTowersRequest, completion: @escaping (Wtclientrpc_ListTowersResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientListTowersCall {
    return try self.listTowers(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getTowerInfo(_ request: Wtclientrpc_GetTowerInfoRequest) throws -> Wtclientrpc_Tower {
    return try self.getTowerInfo(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getTowerInfo(_ request: Wtclientrpc_GetTowerInfoRequest, completion: @escaping (Wtclientrpc_Tower?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientGetTowerInfoCall {
    return try self.getTowerInfo(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func stats(_ request: Wtclientrpc_StatsRequest) throws -> Wtclientrpc_StatsResponse {
    return try self.stats(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func stats(_ request: Wtclientrpc_StatsRequest, completion: @escaping (Wtclientrpc_StatsResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientStatsCall {
    return try self.stats(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func policy(_ request: Wtclientrpc_PolicyRequest) throws -> Wtclientrpc_PolicyResponse {
    return try self.policy(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func policy(_ request: Wtclientrpc_PolicyRequest, completion: @escaping (Wtclientrpc_PolicyResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientPolicyCall {
    return try self.policy(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Wtclientrpc_WatchtowerClientServiceClient: ServiceClientBase, Wtclientrpc_WatchtowerClientService {
  /// Synchronous. Unary.
  internal func addTower(_ request: Wtclientrpc_AddTowerRequest, metadata customMetadata: Metadata) throws -> Wtclientrpc_AddTowerResponse {
    return try Wtclientrpc_WatchtowerClientAddTowerCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func addTower(_ request: Wtclientrpc_AddTowerRequest, metadata customMetadata: Metadata, completion: @escaping (Wtclientrpc_AddTowerResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientAddTowerCall {
    return try Wtclientrpc_WatchtowerClientAddTowerCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func removeTower(_ request: Wtclientrpc_RemoveTowerRequest, metadata customMetadata: Metadata) throws -> Wtclientrpc_RemoveTowerResponse {
    return try Wtclientrpc_WatchtowerClientRemoveTowerCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func removeTower(_ request: Wtclientrpc_RemoveTowerRequest, metadata customMetadata: Metadata, completion: @escaping (Wtclientrpc_RemoveTowerResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientRemoveTowerCall {
    return try Wtclientrpc_WatchtowerClientRemoveTowerCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listTowers(_ request: Wtclientrpc_ListTowersRequest, metadata customMetadata: Metadata) throws -> Wtclientrpc_ListTowersResponse {
    return try Wtclientrpc_WatchtowerClientListTowersCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func listTowers(_ request: Wtclientrpc_ListTowersRequest, metadata customMetadata: Metadata, completion: @escaping (Wtclientrpc_ListTowersResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientListTowersCall {
    return try Wtclientrpc_WatchtowerClientListTowersCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getTowerInfo(_ request: Wtclientrpc_GetTowerInfoRequest, metadata customMetadata: Metadata) throws -> Wtclientrpc_Tower {
    return try Wtclientrpc_WatchtowerClientGetTowerInfoCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getTowerInfo(_ request: Wtclientrpc_GetTowerInfoRequest, metadata customMetadata: Metadata, completion: @escaping (Wtclientrpc_Tower?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientGetTowerInfoCall {
    return try Wtclientrpc_WatchtowerClientGetTowerInfoCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func stats(_ request: Wtclientrpc_StatsRequest, metadata customMetadata: Metadata) throws -> Wtclientrpc_StatsResponse {
    return try Wtclientrpc_WatchtowerClientStatsCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func stats(_ request: Wtclientrpc_StatsRequest, metadata customMetadata: Metadata, completion: @escaping (Wtclientrpc_StatsResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientStatsCall {
    return try Wtclientrpc_WatchtowerClientStatsCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func policy(_ request: Wtclientrpc_PolicyRequest, metadata customMetadata: Metadata) throws -> Wtclientrpc_PolicyResponse {
    return try Wtclientrpc_WatchtowerClientPolicyCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func policy(_ request: Wtclientrpc_PolicyRequest, metadata customMetadata: Metadata, completion: @escaping (Wtclientrpc_PolicyResponse?, CallResult) -> Void) throws -> Wtclientrpc_WatchtowerClientPolicyCall {
    return try Wtclientrpc_WatchtowerClientPolicyCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Wtclientrpc_WatchtowerClientProvider: ServiceProvider {
  func addTower(request: Wtclientrpc_AddTowerRequest, session: Wtclientrpc_WatchtowerClientAddTowerSession) throws -> Wtclientrpc_AddTowerResponse
  func removeTower(request: Wtclientrpc_RemoveTowerRequest, session: Wtclientrpc_WatchtowerClientRemoveTowerSession) throws -> Wtclientrpc_RemoveTowerResponse
  func listTowers(request: Wtclientrpc_ListTowersRequest, session: Wtclientrpc_WatchtowerClientListTowersSession) throws -> Wtclientrpc_ListTowersResponse
  func getTowerInfo(request: Wtclientrpc_GetTowerInfoRequest, session: Wtclientrpc_WatchtowerClientGetTowerInfoSession) throws -> Wtclientrpc_Tower
  func stats(request: Wtclientrpc_StatsRequest, session: Wtclientrpc_WatchtowerClientStatsSession) throws -> Wtclientrpc_StatsResponse
  func policy(request: Wtclientrpc_PolicyRequest, session: Wtclientrpc_WatchtowerClientPolicySession) throws -> Wtclientrpc_PolicyResponse
}

extension Wtclientrpc_WatchtowerClientProvider {
  internal var serviceName: String { return "wtclientrpc.WatchtowerClient" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/wtclientrpc.WatchtowerClient/AddTower":
      return try Wtclientrpc_WatchtowerClientAddTowerSessionBase(
        handler: handler,
        providerBlock: { try self.addTower(request: $0, session: $1 as! Wtclientrpc_WatchtowerClientAddTowerSessionBase) })
          .run()
    case "/wtclientrpc.WatchtowerClient/RemoveTower":
      return try Wtclientrpc_WatchtowerClientRemoveTowerSessionBase(
        handler: handler,
        providerBlock: { try self.removeTower(request: $0, session: $1 as! Wtclientrpc_WatchtowerClientRemoveTowerSessionBase) })
          .run()
    case "/wtclientrpc.WatchtowerClient/ListTowers":
      return try Wtclientrpc_WatchtowerClientListTowersSessionBase(
        handler: handler,
        providerBlock: { try self.listTowers(request: $0, session: $1 as! Wtclientrpc_WatchtowerClientListTowersSessionBase) })
          .run()
    case "/wtclientrpc.WatchtowerClient/GetTowerInfo":
      return try Wtclientrpc_WatchtowerClientGetTowerInfoSessionBase(
        handler: handler,
        providerBlock: { try self.getTowerInfo(request: $0, session: $1 as! Wtclientrpc_WatchtowerClientGetTowerInfoSessionBase) })
          .run()
    case "/wtclientrpc.WatchtowerClient/Stats":
      return try Wtclientrpc_WatchtowerClientStatsSessionBase(
        handler: handler,
        providerBlock: { try self.stats(request: $0, session: $1 as! Wtclientrpc_WatchtowerClientStatsSessionBase) })
          .run()
    case "/wtclientrpc.WatchtowerClient/Policy":
      return try Wtclientrpc_WatchtowerClientPolicySessionBase(
        handler: handler,
        providerBlock: { try self.policy(request: $0, session: $1 as! Wtclientrpc_WatchtowerClientPolicySessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Wtclientrpc_WatchtowerClientAddTowerSession: ServerSessionUnary {}

fileprivate final class Wtclientrpc_WatchtowerClientAddTowerSessionBase: ServerSessionUnaryBase<Wtclientrpc_AddTowerRequest, Wtclientrpc_AddTowerResponse>, Wtclientrpc_WatchtowerClientAddTowerSession {}

internal protocol Wtclientrpc_WatchtowerClientRemoveTowerSession: ServerSessionUnary {}

fileprivate final class Wtclientrpc_WatchtowerClientRemoveTowerSessionBase: ServerSessionUnaryBase<Wtclientrpc_RemoveTowerRequest, Wtclientrpc_RemoveTowerResponse>, Wtclientrpc_WatchtowerClientRemoveTowerSession {}

internal protocol Wtclientrpc_WatchtowerClientListTowersSession: ServerSessionUnary {}

fileprivate final class Wtclientrpc_WatchtowerClientListTowersSessionBase: ServerSessionUnaryBase<Wtclientrpc_ListTowersRequest, Wtclientrpc_ListTowersResponse>, Wtclientrpc_WatchtowerClientListTowersSession {}

internal protocol Wtclientrpc_WatchtowerClientGetTowerInfoSession: ServerSessionUnary {}

fileprivate final class Wtclientrpc_WatchtowerClientGetTowerInfoSessionBase: ServerSessionUnaryBase<Wtclientrpc_GetTowerInfoRequest, Wtclientrpc_Tower>, Wtclientrpc_WatchtowerClientGetTowerInfoSession {}

internal protocol Wtclientrpc_WatchtowerClientStatsSession: ServerSessionUnary {}

fileprivate final class Wtclientrpc_WatchtowerClientStatsSessionBase: ServerSessionUnaryBase<Wtclientrpc_StatsRequest, Wtclientrpc_StatsResponse>, Wtclientrpc_WatchtowerClientStatsSession {}

internal protocol Wtclientrpc_WatchtowerClientPolicySession: ServerSessionUnary {}

fileprivate final class Wtclientrpc_WatchtowerClientPolicySessionBase: ServerSessionUnaryBase<Wtclientrpc_PolicyRequest, Wtclientrpc_PolicyResponse>, Wtclientrpc_WatchtowerClientPolicySession {}

